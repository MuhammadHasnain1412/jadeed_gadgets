# Generated by Django 4.2.7 on 2025-07-27 16:55

from django.db import migrations
from django.utils import timezone
import pytz


def fix_naive_datetimes_products(apps, schema_editor):
    """Fix naive datetime values in products by converting them to timezone-aware datetimes"""
    Product = apps.get_model('products', 'Product')
    Store = apps.get_model('products', 'Store')
    AdminAction = apps.get_model('products', 'AdminAction')
    SuspendedUser = apps.get_model('products', 'SuspendedUser')
    DangerousProductReport = apps.get_model('products', 'DangerousProductReport')
    
    # Set timezone to Asia/Karachi as configured in settings
    karachi_tz = pytz.timezone('Asia/Karachi')
    
    # Fix Product datetime fields
    for product in Product.objects.all():
        if product.created_at and timezone.is_naive(product.created_at):
            aware_datetime = karachi_tz.localize(product.created_at)
            product.created_at = aware_datetime
            product.save(update_fields=['created_at'])
        
        if product.updated_at and timezone.is_naive(product.updated_at):
            aware_datetime = karachi_tz.localize(product.updated_at)
            product.updated_at = aware_datetime
            product.save(update_fields=['updated_at'])
        
        if product.flash_sale_end and timezone.is_naive(product.flash_sale_end):
            aware_datetime = karachi_tz.localize(product.flash_sale_end)
            product.flash_sale_end = aware_datetime
            product.save(update_fields=['flash_sale_end'])
    
    # Fix Store datetime fields
    for store in Store.objects.all():
        if store.created_at and timezone.is_naive(store.created_at):
            aware_datetime = karachi_tz.localize(store.created_at)
            store.created_at = aware_datetime
            store.save(update_fields=['created_at'])
        
        if store.updated_at and timezone.is_naive(store.updated_at):
            aware_datetime = karachi_tz.localize(store.updated_at)
            store.updated_at = aware_datetime
            store.save(update_fields=['updated_at'])
    
    # Fix AdminAction datetime fields
    for action in AdminAction.objects.all():
        if action.timestamp and timezone.is_naive(action.timestamp):
            aware_datetime = karachi_tz.localize(action.timestamp)
            action.timestamp = aware_datetime
            action.save(update_fields=['timestamp'])
        
        if action.follow_up_date and timezone.is_naive(action.follow_up_date):
            aware_datetime = karachi_tz.localize(action.follow_up_date)
            action.follow_up_date = aware_datetime
            action.save(update_fields=['follow_up_date'])
    
    # Fix SuspendedUser datetime fields
    for suspended in SuspendedUser.objects.all():
        if suspended.suspended_at and timezone.is_naive(suspended.suspended_at):
            aware_datetime = karachi_tz.localize(suspended.suspended_at)
            suspended.suspended_at = aware_datetime
            suspended.save(update_fields=['suspended_at'])
        
        if suspended.suspension_end and timezone.is_naive(suspended.suspension_end):
            aware_datetime = karachi_tz.localize(suspended.suspension_end)
            suspended.suspension_end = aware_datetime
            suspended.save(update_fields=['suspension_end'])
    
    # Fix DangerousProductReport datetime fields
    for report in DangerousProductReport.objects.all():
        if report.reported_at and timezone.is_naive(report.reported_at):
            aware_datetime = karachi_tz.localize(report.reported_at)
            report.reported_at = aware_datetime
            report.save(update_fields=['reported_at'])
        
        if report.action_taken_at and timezone.is_naive(report.action_taken_at):
            aware_datetime = karachi_tz.localize(report.action_taken_at)
            report.action_taken_at = aware_datetime
            report.save(update_fields=['action_taken_at'])


def reverse_fix_naive_datetimes_products(apps, schema_editor):
    """Reverse operation - not needed but good practice"""
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0007_suspendeduser_dangerousproductreport_adminaction'),
    ]

    operations = [
        migrations.RunPython(fix_naive_datetimes_products, reverse_fix_naive_datetimes_products),
    ]
